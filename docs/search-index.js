var searchIndex = new Map(JSON.parse('[\
["e_tools",{"doc":"E-Tools","t":"CCCHCFPGPPPNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNOOOOOOHHHHHHHCFFFFFFFOONNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNOONNNNNNNOOOONNNNNNNOONNNNNNNNNNNNNNNNNNNNNOOO","n":["cli","commands","funcs","main","type_defs","Args","ClearDl","Commands","DownloadFavourites","DownloadPost","DownloadPosts","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","eq","equivalent","equivalent","equivalent","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","lower_quality","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","count","post_id","random","tags","text_file","username","download_favourites","download_post","download_posts_from_txt","create_dl_dir","download","lower_quality_dl","parse_artists","api_defs","Alternates","File","LowerQuality","Post","Posts","Sample","Tags","alternates","artist","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","ext","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","has","id","into","into","into","into","into","into","into","lower_quality","media_type","posts","sample","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","tags","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","url","url","urls"],"q":[[0,"e_tools"],[5,"e_tools::cli"],[47,"e_tools::cli::Commands"],[53,"e_tools::commands"],[56,"e_tools::funcs"],[60,"e_tools::type_defs"],[61,"e_tools::type_defs::api_defs"],[153,"clap_builder::builder::command"],[154,"clap_builder::parser::matches::arg_matches"],[155,"clap_builder"],[156,"core::result"],[157,"clap_builder::util::id"],[158,"core::option"],[159,"core::any"],[160,"alloc::string"],[161,"alloc::vec"],[162,"serde::de"],[163,"core::fmt"],[164,"core::fmt"]],"d":["The cli definitions using clap derive","The module with all the command functions.","Special functions for the cli that would otherwise be …","","All modules specific to certain custom type definitions.","The arguments, includes the subcommands from the Commands …","","All the commands the CLI has.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","This function takes the arguments of …","This function takes the arguments of …","This function accepts an already read file which is done …","","This function downloads the file with reqwest and returns …","This function uses the download function to download …","This function parses the artists and returns a neatly …","Api definitions for the E api.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,0,3,3,3,6,6,3,3,6,3,6,3,6,6,6,3,3,3,3,6,3,6,3,6,3,6,3,6,3,6,6,3,6,3,6,3,6,3,6,3,29,30,29,29,31,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,19,20,18,22,19,23,24,25,20,18,22,19,23,24,25,20,18,22,19,23,24,25,22,18,20,18,22,19,23,24,25,20,18,22,19,23,24,25,23,18,20,18,22,19,23,24,25,24,25,20,18,20,18,22,19,23,24,25,22,18,20,18,22,19,23,24,25,20,18,22,19,23,24,25,20,18,22,19,23,24,25,22,23,25],"f":"```{{}b}```````{dd}000{ce{}{}}000{{}d}`0{{ff}h}{{ce}h{}{}}00{cc{}}0{j{{A`{ln}}}}{j{{A`{fn}}}}10{{}{{Ad{Ab}}}}{Afh}88`{c{{A`{e}}}{}{}}000{cAh{}}0{{lj}{{A`{bn}}}}{{fj}{{A`{bn}}}}10``````{{AjAlhAjh}{{Ad{An}}}}{{B`h}{{Ad{An}}}}{{{Bb{Af}}h}{{Ad{An}}}}{{}h}{{AjAjB`Aj}An}{{BdAj}An}{BfAj}``````````{ce{}{}}0000000000000{c{{A`{Bh}}}Bj}{c{{A`{Bd}}}Bj}{c{{A`{Bl}}}Bj}{c{{A`{Bf}}}Bj}{c{{A`{Bn}}}Bj}{c{{A`{C`}}}Bj}{c{{A`{Cb}}}Bj}``{{BhCd}Cf}{{BdCd}Cf}{{BlCd}Cf}{{BfCd}Cf}{{BnCd}Cf}{{C`Cd}Cf}{{CbCd}Cf}{cc{}}000000``???????````{{Bhc}A`Ch}{{Bdc}A`Ch}{{Blc}A`Ch}{{Bfc}A`Ch}{{Bnc}A`Ch}{{C`c}A`Ch}{{Cbc}A`Ch}``{c{{A`{e}}}{}{}}0000000000000{cAh{}}000000```","c":[],"p":[[1,"unit"],[5,"Command",153],[6,"Commands",5],[1,"bool"],[5,"ArgMatches",154],[5,"Args",5],[8,"Error",155],[6,"Result",156],[5,"Id",157],[6,"Option",158],[1,"str"],[5,"TypeId",159],[5,"String",160],[1,"u8"],[1,"f64"],[1,"u64"],[5,"Vec",161],[5,"Post",61],[5,"Tags",61],[5,"Posts",61],[10,"Deserializer",162],[5,"File",61],[5,"Sample",61],[5,"Alternates",61],[5,"LowerQuality",61],[5,"Formatter",163],[8,"Result",163],[10,"Serializer",164],[15,"DownloadFavourites",47],[15,"DownloadPost",47],[15,"DownloadPosts",47]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
